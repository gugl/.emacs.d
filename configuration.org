#+TITLE: Emacs configuration

* Set personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Günter Glück"
        user-mail-address "gugl@guenterglueck.com"
        calendar-latitude 48.209206
        calendar-longitude 16.372778
        calendar-location-name "Vienna, Austria")
#+END_SRC

* Package management

This configuration uses =cask= and =pallet= for managing packages.

This configuration assumes that you installed cask via homebrew.\\
If you installed cask via =curl= you might need to change the past to "~/.cask/cask.el".\\
In order to install cask and pallet follow the =Installation= section on https://github.com/rdallasgray/pallet.

After you installed cask visit your "~/.emacs.d" directory and run =cask install= in it.\\
Now just start =emacs= and you're all set.\\
Every package you will install via =package-list= or =package-install= will be automatically added to your Cask file
as a dependency of your configuration.

#+BEGIN_SRC emacs-lisp
  ;; (require 'cask "~/.cask/cask.el")
  ;; (require 'cask "/usr/local/share/emacs/site-lisp/cask/cask.el")
  ;; (cask-initialize)
  ;; (require 'pallet)
  ;; (pallet-mode t)

  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("gnu" . "http://elpa.gnu.org/packages/") t)
  (package-initialize)

  (setq use-package-always-ensure t)
  (setq use-package-verbose t)
#+END_SRC

* Utility functions
A bunch of handy utility functions. 
#+BEGIN_SRC emacs-lisp
  (defun gugl/mac? ()
    "Returns `t' if this is an Apple machine, nil otherwise."
    (eq system-type 'darwin))
#+END_SRC

* General Command Aliases
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p) ; y or n is enough
#+END_SRC

* Mac OS X
** keyboard mapping

I use all option keys and the right command key as meta.

#+BEGIN_SRC emacs-lisp
  (setq mac-option-modifier 'meta)
  ;; (setq mac-command-modifier 'meta)
  ;; (setq mac-command-modifier 'super)
  (setq mac-right-command-modifier 'meta)
#+END_SRC

** Environment variables for Emacs.app

Copy shell env variables to the emacs environment (fixes some issues with Emacs.app on Mac OS X)

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
               :config
               (when (memq window-system '(mac ns))
                 (exec-path-from-shell-initialize)))

#+END_SRC

* Highlight Symbol under point
  
#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :bind (([(control f3)] . highlight-symbol)
           ([f3]           . highlight-symbol-next)
           ([(shift f3)]   . highlight-symbol-prev)
           ([(meta f3)]    . highlight-symbol-query-replace)))
#+END_SRC

* Neotree

[[https://www.emacswiki.org/emacs/NeoTree][Neo Tree]] is a handy file tree package for emacs.
Use =f8= to open or close it.

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :bind (("M-\\" . neotree-toggle)
           ([f8]   . neotree-toggle))
    :config
    (setq neo-smart-open nil))

  ;;(require 'neotree)

  ;;(global-set-key (kbd "M-\\") 'neotree-toggle)
  ;;(global-set-key [f8] 'neotree-toggle)

  ;;(setq neo-smart-open nil)
#+END_SRC

#+RESULTS:

* Programming
** Async
I think I'm not using it yet but it might be a good idea to have it.
#+BEGIN_SRC emacs-lisp
  (use-package async)
#+END_SRC

** Annotate
With Annotate you can, oh surprise, annotate your text/code files with notes
that are stored separated from your files but you can show them when you need them.

#+BEGIN_SRC emacs-lisp
  (use-package annotate)
#+END_SRC

** Git and Gitflow
*** Magit
=C-x g= will open up =magit-status=

#+BEGIN_SRC emacs-lisp
    (use-package magit
      :bind ("C-x g" . magit-status)
      :config
      (defalias 'blame 'magit-blame))
#+END_SRC

*** Highlight uncommitted changes
Use the =diff-hl= package to highlight changed-and-uncommitted lines when programming.
Refresh the diff-hl margin when magit does a refresh.

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :defer 2
    :config
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+END_SRC

C-f in magit status buffer will invoke the gitflow popup.

*** Git Flow
#+BEGIN_SRC emacs-lisp
  (use-package magit-gitflow
    :defer 2
    :config
    (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))
#+END_SRC

*** Git Timemachine
With Git Timemachine you can walk through the git history of you git-backed file buffer.

Start it with =M-x git-timemachine= then you can use it like this:

|---+----------------------------------------|
| p | Show previous revision                 |
| n | Show next revision                     |
| g | Show nth revision                      |
| q | Quit                                   |
| w | Add abbreviated commit sha to killring |
| W | Add full commit sha to killring        |
|---+----------------------------------------|

#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine)
#+END_SRC

** YaSnippets
  
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :defer 3
    :config
    (yas-global-mode 1))
#+END_SRC
  
** Dumb Jump

[[https://github.com/jacktasia/dumb-jump][Dumb Jump]] is an Emacs "jump to definition" package with support for multiple programming languages that favors "just working". This means minimal -- and ideally zero -- configuration with absolutely no stored indexes (TAGS) or persistent background processes. Dumb Jump requires at least GNU Emacs 24.3.
In order to make it fast, make sure you have [[https://github.com/ggreer/the_silver_searcher][The Silver Searcher]] =ag= installed on your system.

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :defer 2
    :config
    (dumb-jump-mode))
#+END_SRC
** js2-refactor

#+BEGIN_SRC emacs-lisp
  ;; Seems not to work
  ;; (js2r-add-keybindings-with-prefix "C-c C-m")
#+END_SRC

** IDO
  
#+BEGIN_SRC emacs-lisp
  (ido-mode t)
  (setq ido-enable-flex-matching t)
#+END_SRC
  
** Smartparens
  
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :defer 2
    :config
    (require 'smartparens-config)
    (smartparens-global-mode)
    (show-smartparens-global-mode t))
#+END_SRC

** Projectile

[[https://github.com/grizzl/grizzl][Grizzl]] is used as the completion system for projectile.
When running ‘projectile-switch-project’ (C-c p p), ‘neotree’ will change root automatically.  

#+BEGIN_SRC emacs-lisp
  ;;  (use-package grizzl
  ;;    :defer 2)
  (use-package projectile
    :demand t
    :bind (("C-c f" . projectile-find-file))
    :config
    (projectile-global-mode)
    (setq projectile-enable-caching t)
    ;;(setq projectile-completion-system 'grizzl)
    ;;(setq projectile-completion-system 'ivy)
    (setq projectile-switch-project-action 'neotree-projectile-action))
#+END_SRC

#+RESULTS:

** Cucumber
  
#+BEGIN_SRC emacs-lisp
  (use-package feature-mode
    :mode
    ("\.feature$" . feature-mode)
    ("\\.feature$" . feature--mode)
    :config
    (add-hook 'feature-mode-hook
              (lambda ()
                (local-set-key (kbd "M-r") 'feature-verify-scenario-at-pos)
                )))
#+END_SRC
  
** Tab size

You can read about indentation basics [[https://www.emacswiki.org/emacs/IndentationBasics][here in the emacs wiki]].

Never use tabs.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Set the default tab size to 2.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

Use the default tab width for c based languages.

#+BEGIN_SRC emacs-lisp
  (defvaralias 'c-basic-offset 'tab-with)
#+END_SRC

Set all indent offsets to the tab size of 2.

#+BEGIN_SRC emacs-lisp

  (use-package web-mode)
  (use-package coffee-mode)

  (defun my-setup-indent (n)
    ;; java/c/c++
    (setq c-basic-offset n)
    ;; web development
    (setq coffee-tab-width n) ; coffeescript
    (setq javascript-indent-level n) ; javascript-mode
    (setq js-indent-level n) ; js-mode
    (setq js2-basic-offset n) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
    (setq web-mode-markup-indent-offset n) ; web-mode, html tag in html file
    (setq web-mode-css-indent-offset n) ; web-mode, css in html file
    (setq web-mode-code-indent-offset n) ; web-mode, js code in html file
    (setq css-indent-offset n) ; css-mode
    )

  ;; adjust indents for web-mode to 2 spaces
  (defun my-web-mode-hook ()
    "Hooks for Web mode. Adjust indents"
      ;;; http://web-mode.org/
      (my-setup-indent 2))
  (add-hook 'web-mode-hook  'my-web-mode-hook)

  (my-setup-indent 2)
#+END_SRC

** Ruby

Add additional [[https://github.com/Fuco1/smartparens][smartparens]] configuration for Ruby based modes and add two extra pairs to the rhtml mode.

#+BEGIN_SRC emacs-lisp
  (require 'smartparens-ruby)
  (sp-with-modes '(rhtml-mode)
    (sp-local-pair "<" ">")
    (sp-local-pair "<%" "%>"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ruby-end)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'ruby-mode-hook 'robe-mode)
  
  ;; Setting rbenv path
;  (setq rbenv-installation-dir "/usr/local/opt/rbenv")
;  (require 'rbenv)
;  (global-rbenv-mode)
   
  (require 'cl) ; If you don't have it already
   
  (defun* get-closest-gemfile-root (&optional (file "Gemfile"))
    "Determine the pathname of the first instance of FILE starting from the current directory towards root.
  This may not do the correct thing in presence of links. If it does not find FILE, then it shall return the name
  of FILE in the current directory, suitable for creation"
    (let ((root (expand-file-name "/"))) ; the win32 builds should translate this correctly
      (loop 
       for d = default-directory then (expand-file-name ".." d)
       if (file-exists-p (expand-file-name file d))
       return d
       if (equal d root)
       return nil)))
   
; (require 'compile)
  
  (setq compilation-scroll-output "first-error")
  
  (defun rspec-compile-all ()
    (interactive)
    (compile (format (concat "cd " (get-closest-gemfile-root) ";bundle exec rspec")) t))
  
  (defun rspec-compile-file ()
    (interactive)
    ()
    (save-buffer)
    (compile (format "cd %s;bundle exec rspec %s"
                     (get-closest-gemfile-root)
                     (file-relative-name (buffer-file-name) (get-closest-gemfile-root))
                     ) t))
  
  (defun rspec-compile-on-line ()
    (interactive)
    (compile (format "cd %s;rspec %s -l %s"
                     (get-closest-gemfile-root)
                     (file-relative-name (buffer-file-name) (get-closest-gemfile-root))
                     (line-number-at-pos)
                     ) t))
   
  (add-hook 'projectile-mode-hook 'projectile-rails-on)
  
  ; (define-key projectile-rails-mode-map (kbd "s-RET") 'projectile-rails-goto-file-at-point)
#+END_SRC

** Elixir

Taken from https://github.com/elixir-lang/emacs-elixir
Also, if you use smartparens you can piggyback on some of its functionality for dealing with Ruby's do .. end blocks. A sample configuration would be.

#+BEGIN_SRC emacs-lisp
  (use-package elixir-mode
    :config
    (sp-with-modes '(elixir-mode)
      (sp-local-pair "fn" "end"
                     :when '(("SPC" "RET"))
                     :actions '(insert navigate))
      (sp-local-pair "do" "end"
                     :when '(("SPC" "RET"))
                     :post-handlers '(sp-ruby-def-post-handler)
                     :actions '(insert navigate))))
#+END_SRC

Alchemist: Elixir Tooling Integration Into Emacs

#+BEGIN_SRC emacs-lisp
  (setq alchemist-key-command-prefix (kbd "C-c e"))

  (use-package alchemist
    :config
    (add-hook 'elixir-mode-hook 'alchemist-mode)
    (add-to-list 'auto-mode-alist '("\\.eex$" . web-mode))
    (setq alchemist-hooks-test-on-save t))
#+END_SRC

** React
#+BEGIN_SRC emacs-lisp

  ;; use web-mode for .jsx files
  (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.js$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.cjsx$" . web-mode))

  ;; http://www.flycheck.org/manual/latest/index.html
  (use-package flycheck
    :config
    (add-hook 'web-mode-hook 'flycheck-mode)

    ;; disable jshint since we prefer eslint checking
    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(javascript-jshint)))

    ;; use eslint with web-mode for jsx files
    (flycheck-add-mode 'javascript-eslint 'web-mode)

    ;; customize flycheck temp file prefix
    (setq-default flycheck-temp-prefix ".flycheck")

    ;; disable json-jsonlist checking for json files
    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(json-jsonlist)))
    )


  (add-hook 'web-mode-hook
            (lambda ()
              ;; short circuit js mode and just do everything in jsx-mode
              (if (equal web-mode-content-type "javascript")
                  (web-mode-set-content-type "jsx")
                (message "now set to: %s" web-mode-content-type))))

  ;; https://github.com/purcell/exec-path-from-shell
  ;; only need exec-path-from-shell on OSX
  ;; this hopefully sets up path and other vars better
  ;; (when (memq window-system '(mac ns))
  ;;   (exec-path-from-shell-initialize))


  ;; for better jsx syntax-highlighting in web-mode
  ;; - courtesy of Patrick @halbtuerke
  ;; (defadvice web-mode-highlight-part (around tweak-jsx activate)
  ;;   (if (equal web-mode-content-type "jsx")
  ;;      (let ((web-mode-enable-part-face nil))
  ;;        ad-do-it)
  ;;        ad-do-it))
#+END_SRC

** Marionette.js
Use web-mode for Marionette.js template files.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.jst.eco$" . web-mode))
#+END_SRC

* Org Mode
** Source Code Language Support
#+BEGIN_SRC emacs-lisp :results silent
  (require 'ob-sh)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sh . t)
     (emacs-lisp . t)
     ))
#+END_SRC

** Display preferences

I like seeing a little downward-pointing arrow instead of the usual ellipsis (...) that org displays when there’s stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language’s major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

#+BEGIN_SRC emacs-lisp
    (setq org-directory "~/org")

    (defun org-file-path (filename)
      "Return the absolute address of an org file, given its relative name."
      (concat (file-name-as-directory org-directory) filename))

    (setq org-completion-use-ido t)
    (setq org-agenda-files (quote ("~/org")))
    (setq org-refile-targets '((org-agenda-files :level . 1)(org-agenda-files :tag . "PROJECT")))

    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-cc" 'org-capture)
    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cb" 'org-iswitchb)

    (defalias 'agenda 'org-agenda)

    (setq org-log-done 'time)
#+END_SRC

My weeks begin on Monday
#+BEGIN_SRC emacs-lisp
  (setq calendar-week-start-day 1)
#+END_SRC

** GTD

The setup here is inspired by Charles Cave and [[http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html][his GTD workflow]] but using the newer and now recommended org-capture instead of remember-mode.

Use =C-c C-x C-c= to switch from the agenda to the column view. This gives you a better overview of your day and an easy interface to estimate your tasks.

For privacy reasons I moved my gtd config in the dedicated =gtd.el= file that is not in the public git repository.

#+BEGIN_SRC emacs-lisp
  (let ((file "~/.emacs.d/gtd.el"))
        (cond ((file-exists-p file)
               (load-file file))))
#+END_SRC

Make windmove work in org-mode where it does not have special org-mode meaning.
See the discussion [[http://orgmode.org/manual/Conflicts.html][here]] to read the full story.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

Use the fast selection window to set a task to a new state.
Use =C-c C-t= to set a new state.

#+BEGIN_SRC emacs-lisp
  (setq org-use-fast-todo-selection t)
#+END_SRC

** Org Journal
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :bind (("C-c j" . org-journal-new-entry))
    :config
    (setq org-journal-dir "~/org/journal/"))
#+END_SRC

* Email

For privacy reasons I moved my mail config in the dedicated =mail.el= file that is not in the public git repository.

#+BEGIN_SRC emacs-lisp
  (let ((file "~/.emacs.d/mail.el"))
        (cond ((file-exists-p file)
               (load-file file))))
#+END_SRC

* Completion using Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode t)
    ;; (add-hook 'after-init-hook 'global-company-mode)

    (setq company-tooltip-limit 12)                      ; bigger popup window
    (setq company-idle-delay .1)                         ; decrease delay before autocompletion popup shows
    (setq company-echo-delay 0)                          ; remove annoying blinking
    (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
    (setq company-dabbrev-downcase nil)                  ; Do not convert to lowercase
    (setq company-selection-wrap-around t)               ; continue from top when reaching bottom

    )

  (use-package helm
    :config
    (require 'helm-config))
#+END_SRC

* Auto Save all buffers on Focus loss
#+BEGIN_SRC emacs-lisp
  (defun save-all ()
    (interactive)
    (save-some-buffers t))
  
  (add-hook 'focus-out-hook 'save-all)
#+END_SRC
  
* Engine mode
Enable =engine-mode= and define a few useful engines.
The default keymap prefix for them is =C-c /=.

#+BEGIN_SRC emacs-lisp
  (use-package engine-mode
    :defer 2
    :config
    (defengine duckduckgo
      "https://duckduckgo.com/?q=%s"
      :keybinding "d")

    (defengine github
      "https://github.com/search?ref=simplesearch&q=%s"
      :keybinding "g")

    (defengine google
      "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")

    (defengine rfcs
      "http://pretty-rfc.herokuapp.com/search?q=%s")

    (defengine stack-overflow
      "https://stackoverflow.com/search?q=%s"
      :keybinding "s")

    (defengine wikipedia
      "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
      :keybinding "w")

    (defengine wiktionary
      "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

    (engine-mode t))
#+END_SRC
* General & UI preferences
** Theme and font

At the moment I try the =Inconsolata= font.
You can download it [[https://www.fontsquirrel.com/fonts/Inconsolata][here from Font Squirrel]].

#+BEGIN_SRC emacs-lisp
  (use-package railscasts-theme
    :config
    (load-theme 'railscasts t nil)
    (set-frame-font "Menlo-16"))
  ;; (set-frame-font "Inconsolata-16")
#+END_SRC

** Set default font and configure font resizing
The standard text-scale- functions just resize the text in the current buffer; 
I’d generally like to resize the text in every buffer, and I usually want to change 
the size of the modeline, too (this is especially helpful when presenting).
These functions and bindings let me resize everything all together!

#+BEGIN_SRC emacs-lisp
  (setq gugl/default-font "Inconsolata")
  (setq gugl/default-font "Menlo")
  (setq gugl/default-font-size 16)
  (setq gugl/current-font-size gugl/default-font-size)
  (setq gugl/font-change-increment 1.1)

  (defun gugl/set-font-size ()
    "Set the font to `gugl/default-font' at `gugl/current-font-size'."
    (set-frame-font
     (concat gugl/default-font "-" (number-to-string gugl/current-font-size))))
  
  (defun gugl/reset-font-size ()
    "Change font size back to `gugl/default-font-size'."
    (interactive)
    (setq gugl/current-font-size gugl/default-font-size)
    (gugl/set-font-size))
  
  (defun gugl/increase-font-size ()
    "Increase current font size by a factor of `gugl/font-change-increment'."
    (interactive)
    (setq gugl/current-font-size
          (ceiling (* gugl/current-font-size gugl/font-change-increment)))
    (gugl/set-font-size))
  
  (defun gugl/decrease-font-size ()
    "Decrease current font size by a factor of `gugl/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq gugl/current-font-size
          (max 1
               (floor (/ gugl/current-font-size gugl/font-change-increment))))
    (gugl/set-font-size))
  
  (define-key global-map (kbd "C-)") 'gugl/reset-font-size)
  (define-key global-map (kbd "C-+") 'gugl/increase-font-size)
  (define-key global-map (kbd "C-=") 'gugl/increase-font-size)
  (define-key global-map (kbd "C-_") 'gugl/decrease-font-size)
  (define-key global-map (kbd "C--") 'gugl/decrease-font-size)
#+END_SRC

** Hide certain modes from the modeline
I’d rather have only a few necessary mode identifiers on my modeline.
This either hides or “renames” a variety of major or minor modes using the =diminish= package.

#+BEGIN_SRC emacs-lisp
  (use-package diminish)
  (defmacro diminish-minor-mode (filename mode &optional abbrev)
    `(eval-after-load (symbol-name ,filename)
       '(diminish ,mode ,abbrev)))
  
  (defmacro diminish-major-mode (mode-hook abbrev)
    `(add-hook ,mode-hook
               (lambda () (setq mode-name ,abbrev))))
  
  (diminish-minor-mode 'abbrev 'abbrev-mode)
  (diminish-minor-mode 'company 'company-mode)
  (diminish-minor-mode 'eldoc 'eldoc-mode)
  (diminish-minor-mode 'flycheck 'flycheck-mode)
  (diminish-minor-mode 'flyspell 'flyspell-mode)
  (diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
  (diminish-minor-mode 'projectile 'projectile-mode)
  (diminish-minor-mode 'ruby-end 'ruby-end-mode)
  (diminish-minor-mode 'subword 'subword-mode)
  (diminish-minor-mode 'undo-tree 'undo-tree-mode)
  (diminish-minor-mode 'yard-mode 'yard-mode)
  (diminish-minor-mode 'yasnippet 'yas-minor-mode)
  (diminish-minor-mode 'wrap-region 'wrap-region-mode)
  
  (diminish-minor-mode 'paredit 'paredit-mode " π")
  
  (diminish-major-mode 'emacs-lisp-mode-hook "el")
  (diminish-major-mode 'haskell-mode-hook "λ=")
  (diminish-major-mode 'lisp-interaction-mode-hook "λ")
  (diminish-major-mode 'python-mode-hook "Py")
#+END_SRC

** Disable Scrollbar and toolbar

#+BEGIN_SRC emacs-lisp
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
#+END_SRC
  
** Window navigation
  
Navigate between windows using Alt-1, Alt-2, Shift-left, shift-up, shift-right

Also use M-o to switch to the next window

#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC

** Window splitting
*** split-height-threshold fix for rgrep or org-agenda with neotree

Reducing the split-height-threshold to 30 lines in order to fix the issue
that created a new frame when using =rgrep= or =org-agenda= while neotree is open.

#+BEGIN_SRC emacs-lisp
  (setq split-height-threshold 40)
#+END_SRC

** Switching between window configurations

You can use C-c left or C-c right to switch to the prev or next window configuration.
This is very useful when you want to focus on one single buffer but want to go back
to your old more complex window configuration.

#+BEGIN_SRC emacs-lisp
  (winner-mode t)
#+END_SRC

** Powerline

Use Powerline with it's default theme

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :config
    (powerline-default-theme))
#+END_SRC

** Guide Key

[[https://github.com/kai2nenobu/guide-key][Guide Key]] displays the available key bindings automatically and dynamically.

#+BEGIN_SRC emacs-lisp
  (use-package guide-key
    :config
    (setq guide-key/guide-key-sequence t)
    (guide-key-mode 1))
#+END_SRC

** Better completion wity ivy, swiper and counsel
*** Ag
#+BEGIN_SRC emacs-lisp
(use-package ag)
#+END_SRC

*** Ivy
Better replacement for ~ido-mode~ as the completion system.
For more information see http://oremacs.com/2015/04/16/ivy-mode/

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :defer 2
    :diminish t
    :config
    (ivy-mode 1))
#+END_SRC

*** Counsel
~ivy-mode~ ensures that any Emacs command using ~completing-read-function~ uses ivy for completion.

Counsel takes this further, providing versions of common Emacs commands that are customised to make the best use of ivy.
For example, ~counsel-find-file~ has some additional keybindings. Pressing ~DEL~ will move you to the parent directory.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :defer 2
    :bind (("C-x C-f" . counsel-find-file)))
#+END_SRC

#+RESULTS:

*** Counsel Projectile
~counsel-projectile~ adds counsel goodness to some projectile commands from projectile-find-file to projectile-ag.
See the full list at https://github.com/ericdanan/counsel-projectile

#+BEGIN_SRC emacs-lisp
    (use-package counsel-projectile
      :defer 2
      :config
      (counsel-projectile-on)
      (global-set-key (kbd "M-t") 'counsel-projectile)
  )
#+END_SRC

#+RESULTS:
: t

*** Counsel OSX App
With ~counsel-osx-app~ you can start macOS Applications from within emacs using M-x counsel-osx-app.
https://github.com/d12frosted/counsel-osx-app

#+BEGIN_SRC emacs-lisp
  (use-package counsel-osx-app
    :defer 3)
#+END_SRC

*** Swiper - Better isearch
Replacement for isearch. It's awesome.
You can get a really good overview in the minibuffer.

For more information see https://github.com/abo-abo/swiper

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind ("C-s" . swiper))
#+END_SRC

*** Avy - Jump to things in Emacs tree-style
#+BEGIN_SRC emacs-lisp
  (use-package avy)
#+END_SRC

** Shell
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+END_SRC

** Smoother Scrolling
#+BEGIN_SRC emacs-lisp
  ;; scroll one line at a time (less "jumpy" than defaults)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
#+END_SRC

* Dashboard
1. Displays an awesome Emacs banner!
2. Recent files
3. Bookmarks list
4. Recent projectile projects list

#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :config
    (global-page-break-lines-mode 1))

  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "Welcome to Emacs! What a wonderful day!")
    (setq dashboard-startup-banner 'official)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5))))

#+END_SRC
