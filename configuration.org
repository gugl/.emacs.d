#+TITLE: Emacs configuration

* Set personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Günter Glück"
        user-mail-address "gugl@guenterglueck.com"
        calendar-latitude 48.209206
        calendar-longitude 16.372778
        calendar-location-name "Vienna, Austria")
#+END_SRC

* Package management

I use =cask= and =pallet= for managing packages.

#+BEGIN_SRC emacs-lisp
  ;; (require 'cask "~/.cask/cask.el")
  (require 'cask "~/.emacs.d/.cask/24.5.1/elpa/cask-20151123.528/cask.el")
  (cask-initialize)
  (require 'pallet)
  (pallet-mode t)

  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("gnu" . "http://elpa.gnu.org/packages/") t)
  (package-initialize)
#+END_SRC

* Utility functions
A bunch of handy utility functions. 
#+BEGIN_SRC emacs-lisp
  (defun gugl/mac? ()
    "Returns `t' if this is an Apple machine, nil otherwise."
    (eq system-type 'darwin))
#+END_SRC

* Mac OS X
** keyboard mapping

I use all option keys and the right command key as meta.

#+BEGIN_SRC emacs-lisp
  (setq mac-option-modifier 'meta)
  ;; (setq mac-command-modifier 'meta)
  ;; (setq mac-command-modifier 'super)
  (setq mac-right-command-modifier 'meta)
#+END_SRC

** Environment variables for Emacs.app

Copy shell env variables to the emacs environment (fixes some issues with Emacs.app on Mac OS X)

#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize))
#+END_SRC

* Highlight Symbol under point
  
#+BEGIN_SRC emacs-lisp
  (require 'highlight-symbol)
  (global-set-key [(control f3)] 'highlight-symbol)
  (global-set-key [f3] 'highlight-symbol-next)
  (global-set-key [(shift f3)] 'highlight-symbol-prev)
  (global-set-key [(meta f3)] 'highlight-symbol-query-replace)
#+END_SRC

* Neotree

[[https://www.emacswiki.org/emacs/NeoTree][Neo Tree]] is a handy file tree package for emacs.
Use =f8= to open or close it.

#+BEGIN_SRC emacs-lisp
  (require 'neotree)
  
  (global-set-key (kbd "M-\\") 'neotree-toggle)
  (global-set-key [f8] 'neotree-toggle)
  
  (setq neo-smart-open nil)
#+END_SRC

* Programming
** Git and Gitflow
C-f in magit status buffer will invoke the gitflow popup.

#+BEGIN_SRC emacs-lisp
  (require 'magit-gitflow)
  (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)
#+END_SRC

=C-x g= will open up =magit-status=

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

Refresh the diff-hl margin when magit does a refresh.
#+BEGIN_SRC emacs-lisp
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
#+END_SRC

** YaSnippets
  
#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)
#+END_SRC
  
** js2-refactor

#+BEGIN_SRC emacs-lisp
  ;; Seems not to work
  ;; (js2r-add-keybindings-with-prefix "C-c C-m")
#+END_SRC

** IDO
  
#+BEGIN_SRC emacs-lisp
  (ido-mode t)
  (setq ido-enable-flex-matching t)
#+END_SRC
  
** Smartparens
  
#+BEGIN_SRC emacs-lisp
  (require 'smartparens-config)
  (smartparens-global-mode)
  (show-smartparens-global-mode t)
#+END_SRC

** Projectile
  
#+BEGIN_SRC emacs-lisp
  (require 'grizzl)
  (projectile-global-mode)
  (setq projectile-enable-caching t)
  (setq projectile-completion-system 'grizzl)
  (global-set-key (kbd "C-c f") 'projectile-find-file)
#+END_SRC

When running ‘projectile-switch-project’ (C-c p p), ‘neotree’ will change root automatically.

#+BEGIN_SRC emacs-lisp
  (setq projectile-switch-project-action 'neotree-projectile-action)
#+END_SRC

** Cucumber
  
#+BEGIN_SRC emacs-lisp
  (require 'feature-mode)
  (add-to-list 'auto-mode-alist '("\.feature$" . feature-mode))
  (add-to-list 'auto-mode-alist '("\\.feature$" . feature--mode))
  (add-hook 'feature-mode-hook
            (lambda ()
              (local-set-key (kbd "M-r") 'feature-verify-scenario-at-pos)
              ))
#+END_SRC
  
** Tab size

You can read about indentation basics [[https://www.emacswiki.org/emacs/IndentationBasics][here in the emacs wiki]].

Never use tabs.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Set the default tab size to 2.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

Use the default tab width for c based languages.

#+BEGIN_SRC emacs-lisp
  (defvaralias 'c-basic-offset 'tab-with)
#+END_SRC

** Ruby

Add additional [[https://github.com/Fuco1/smartparens][smartparens]] configuration for Ruby based modes and add two extra pairs to the rhtml mode.

#+BEGIN_SRC emacs-lisp
  (require 'smartparens-ruby)
  (sp-with-modes '(rhtml-mode)
    (sp-local-pair "<" ">")
    (sp-local-pair "<%" "%>"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'ruby-mode-hook 'robe-mode)
  
  ;; Setting rbenv path
;  (setq rbenv-installation-dir "/usr/local/opt/rbenv")
;  (require 'rbenv)
;  (global-rbenv-mode)
   
  (require 'cl) ; If you don't have it already
   
  (defun* get-closest-gemfile-root (&optional (file "Gemfile"))
    "Determine the pathname of the first instance of FILE starting from the current directory towards root.
  This may not do the correct thing in presence of links. If it does not find FILE, then it shall return the name
  of FILE in the current directory, suitable for creation"
    (let ((root (expand-file-name "/"))) ; the win32 builds should translate this correctly
      (loop 
       for d = default-directory then (expand-file-name ".." d)
       if (file-exists-p (expand-file-name file d))
       return d
       if (equal d root)
       return nil)))
   
; (require 'compile)
  
  (setq compilation-scroll-output "first-error")
  
  (defun rspec-compile-all ()
    (interactive)
    (compile (format (concat "cd " (get-closest-gemfile-root) ";bundle exec rspec")) t))
  
  (defun rspec-compile-file ()
    (interactive)
    ()
    (save-buffer)
    (compile (format "cd %s;bundle exec rspec %s"
                     (get-closest-gemfile-root)
                     (file-relative-name (buffer-file-name) (get-closest-gemfile-root))
                     ) t))
  
  (defun rspec-compile-on-line ()
    (interactive)
    (compile (format "cd %s;rspec %s -l %s"
                     (get-closest-gemfile-root)
                     (file-relative-name (buffer-file-name) (get-closest-gemfile-root))
                     (line-number-at-pos)
                     ) t))
   
  (add-hook 'projectile-mode-hook 'projectile-rails-on)
  
  ; (define-key projectile-rails-mode-map (kbd "s-RET") 'projectile-rails-goto-file-at-point)
#+END_SRC

** Elixir

#+BEGIN_SRC emacs-lisp
  (add-hook 'elixir-mode-hook 'alchemist-mode)
#+END_SRC

** React
#+BEGIN_SRC emacs-lisp
  ;; use web-mode for .jsx files
  (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.js$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.cjsx$" . web-mode))

  ;; http://www.flycheck.org/manual/latest/index.html
  (require 'flycheck)

  (add-hook 'web-mode-hook 'flycheck-mode)

  ;; disable jshint since we prefer eslint checking
  (setq-default flycheck-disabled-checkers
    (append flycheck-disabled-checkers
      '(javascript-jshint)))

  ;; use eslint with web-mode for jsx files
  (flycheck-add-mode 'javascript-eslint 'web-mode)

  ;; customize flycheck temp file prefix
  (setq-default flycheck-temp-prefix ".flycheck")

  ;; disable json-jsonlist checking for json files
  (setq-default flycheck-disabled-checkers
    (append flycheck-disabled-checkers
      '(json-jsonlist)))

  (add-hook 'web-mode-hook
      (lambda ()
        ;; short circuit js mode and just do everything in jsx-mode
        (if (equal web-mode-content-type "javascript")
            (web-mode-set-content-type "jsx")
          (message "now set to: %s" web-mode-content-type))))

  ;; https://github.com/purcell/exec-path-from-shell
  ;; only need exec-path-from-shell on OSX
  ;; this hopefully sets up path and other vars better
  ;; (when (memq window-system '(mac ns))
  ;;   (exec-path-from-shell-initialize))


  (defun my-setup-indent (n)
    ;; java/c/c++
    (setq c-basic-offset n)
    ;; web development
    (setq coffee-tab-width n) ; coffeescript
    (setq javascript-indent-level n) ; javascript-mode
    (setq js-indent-level n) ; js-mode
    (setq js2-basic-offset n) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
    (setq web-mode-markup-indent-offset n) ; web-mode, html tag in html file
    (setq web-mode-css-indent-offset n) ; web-mode, css in html file
    (setq web-mode-code-indent-offset n) ; web-mode, js code in html file
    (setq css-indent-offset n) ; css-mode
    )

  ;; adjust indents for web-mode to 2 spaces
  (defun my-web-mode-hook ()
    "Hooks for Web mode. Adjust indents"
      ;;; http://web-mode.org/
      (my-setup-indent 2))
  (add-hook 'web-mode-hook  'my-web-mode-hook)

  (my-setup-indent 2)

  ;; for better jsx syntax-highlighting in web-mode
  ;; - courtesy of Patrick @halbtuerke
  ;; (defadvice web-mode-highlight-part (around tweak-jsx activate)
  ;;   (if (equal web-mode-content-type "jsx")
  ;;      (let ((web-mode-enable-part-face nil))
  ;;        ad-do-it)
  ;;        ad-do-it))
#+END_SRC

** Marionette.js
Use web-mode for Marionette.js template files.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.jst.eco$" . web-mode))
#+END_SRC

* Org Mode
** Display preferences

I like seeing a little downward-pointing arrow instead of the usual ellipsis (...) that org displays when there’s stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language’s major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/org")

  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (setq org-journal-dir "~/org/journal/")
  (setq org-completion-use-ido t)
  (setq org-agenda-files (quote ("~/org")))
  (setq org-refile-targets '((org-agenda-files :level . 1)))

  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)

  (setq org-log-done 'time)
#+END_SRC

My weeks begin on Monday
#+BEGIN_SRC emacs-lisp
  (setq calendar-week-start-day 1)
#+END_SRC

** GTD

The setup here is inspired by Charles Cave and [[http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html][his GTD workflow]] but using the newer and now recommended org-capture instead of remember-mode.

Use =C-c C-x C-c= to switch from the agenda to the column view. This gives you a better overview of your day and an easy interface to estimate your tasks.

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat org-directory "/gtd.org"))
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
           "* TODO %^{Summary (begin with action verb)} %^g\n%?\n  %i\nAdded: %U")

          ("T" "Todo with store-link" entry (file+headline "~/org/gtd.org" "Tasks")
           "* TODO %?\n  %i\n  %a")

          ("j" "Journal" entry (file+datetree "~/org/journal.org")
           "\n* %?\nEntered on %U\n  %i")
          
          ("b" "Blog idea" entry (file (org-file-path "blog-ideas.org"))
           "* TODO %?\n")
          
          ("g" "Groceries" checkitem (file (org-file-path "groceries.org")))

          ("l" "Today I Learned..." entry (file+datetree (org-file-path "til.org"))
           "* %?\n")

          ("r" "Reading" checkitem (file (org-file-path "to-read.org")))

          ;;("J" "Journal wit org-journal" plain (function org-journal-get-entry-path)
          ;; "** %?")

          ;;("J" "Journal with store-link" entry (file+datetree "~/org/journal.org")
          ;; "* %?\nEntered on %U\n  %i\n  %a")
          ))
#+END_SRC

Make windmove work in org-mode where it does not have special org-mode meaning.
See the discussion [[http://orgmode.org/manual/Conflicts.html][here]] to read the full story.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

Use the fast selection window to set a task to a new state.
Use =C-c C-t= to set a new state.

#+BEGIN_SRC emacs-lisp
  (setq org-use-fast-todo-selection t)
#+END_SRC

* Email
#+BEGIN_SRC emacs-lisp
  ;; Also look at the following files
  ;;
  ;; .mbsyncrc      (sync imap emails)
  ;; .msmtprc       (send mails)
  
  ; add the source shipped with mu to load-path
  (add-to-list 'load-path (expand-file-name "/usr/local/Cellar/mu/0.9.16/share/emacs/site-lisp/mu/mu4e"))
  
  ; make sure emacs finds applications in /usr/local/bin
  (setq exec-path (cons "/usr/local/bin" exec-path))
  
  ; require mu4e
  (require 'mu4e)
  
  ; tell mu4e where my Maildir is
  (setq mu4e-maildir "~/Maildir")
  ; tell mu4e how to sync email
  (setq mu4e-get-mail-command "/usr/local/bin/mbsync -a")
  ; tell mu4e to use w3m for html rendering
  (setq mu4e-html2text-command "/usr/local/bin/w3m -T text/html")
  
  ; taken from mu4e page to define bookmarks
  (add-to-list 'mu4e-bookmarks
              '("size:5M..500M"       "Big messages"     ?b))
  
  ; mu4e requires to specify drafts, sent, and trash dirs
  ; a smarter configuration allows to select directories according to the account (see mu4e page)
  ; (setq mu4e-drafts-folder "/work/drafts")
  ; (setq mu4e-sent-folder "/work/sent")
  ; (setq mu4e-trash-folder "/work/trash")
  
  (setq
    mu4e-sent-folder   "/gmail/sent"       ;; folder for sent messages
    mu4e-drafts-folder "/gmail/drafts"     ;; unfinished messages
    mu4e-trash-folder  "/gmail/trash"      ;; trashed messages
    mu4e-refile-folder "/gmail/archive")   ;; saved messages
  
  ; use msmtp
  (setq message-send-mail-function 'message-send-mail-with-sendmail)
  (setq sendmail-program "/usr/local/bin/msmtp")
  ; tell msmtp to choose the SMTP server according to the from field in the outgoing email
  (setq message-sendmail-extra-arguments '("--read-envelope-from"))
  (setq message-sendmail-f-is-evil 't)
#+END_SRC

* Auto-complete

#+BEGIN_SRC emacs-lisp
  ;; (require 'auto-complete-config)
  ;; (add-to-list 'ac-dictionary-directories
  ;;	     "~/.emacs.d/.cask/24.4.1/elpa/auto-complete-20150322.813/dict")
  ;; (ac-config-default)
  ;;(setq ac-ignore-case nil)
  
  (global-company-mode t)
  ;; (add-hook 'after-init-hook 'global-company-mode)
  
  (setq company-tooltip-limit 12)                      ; bigger popup window
  (setq company-idle-delay .1)                         ; decrease delay before autocompletion popup shows
  (setq company-echo-delay 0)                          ; remove annoying blinking
  (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
  (setq company-dabbrev-downcase nil)                  ; Do not convert to lowercase
  (setq company-selection-wrap-around t)               ; continue from top when reaching bottom
  
  (require 'helm-config)
#+END_SRC

* Auto Save all buffers on Focus loss
#+BEGIN_SRC emacs-lisp
  (defun save-all ()
    (interactive)
    (save-some-buffers t))
  
  (add-hook 'focus-out-hook 'save-all)
#+END_SRC
  
* Engine mode
Enable =engine-mode= and define a few useful engines.
The default keymap prefix for them is =C-c /=.

#+BEGIN_SRC emacs-lisp
  (require 'engine-mode)

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")

  (defengine rfcs
    "http://pretty-rfc.herokuapp.com/search?q=%s")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w")

  (defengine wiktionary
    "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

  (engine-mode t)
#+END_SRC
* UI preferences
** Theme and font

At the moment I try the =Inconsolata= font.
You can download it [[https://www.fontsquirrel.com/fonts/Inconsolata][here from Font Squirrel]].

#+BEGIN_SRC emacs-lisp
  (load-theme 'railscasts t nil)
  (set-frame-font "Menlo-16")
  ;; (set-frame-font "Inconsolata-16")
#+END_SRC

** Set default font and configure font resizing
The standard text-scale- functions just resize the text in the current buffer; 
I’d generally like to resize the text in every buffer, and I usually want to change 
the size of the modeline, too (this is especially helpful when presenting).
These functions and bindings let me resize everything all together!

#+BEGIN_SRC emacs-lisp
  (setq gugl/default-font "Inconsolata")
  (setq gugl/default-font "Menlo")
  (setq gugl/default-font-size 16)
  (setq gugl/current-font-size gugl/default-font-size)
  (setq gugl/font-change-increment 1.1)

  (defun gugl/set-font-size ()
    "Set the font to `gugl/default-font' at `gugl/current-font-size'."
    (set-frame-font
     (concat gugl/default-font "-" (number-to-string gugl/current-font-size))))
  
  (defun gugl/reset-font-size ()
    "Change font size back to `gugl/default-font-size'."
    (interactive)
    (setq gugl/current-font-size gugl/default-font-size)
    (gugl/set-font-size))
  
  (defun gugl/increase-font-size ()
    "Increase current font size by a factor of `gugl/font-change-increment'."
    (interactive)
    (setq gugl/current-font-size
          (ceiling (* gugl/current-font-size gugl/font-change-increment)))
    (gugl/set-font-size))
  
  (defun gugl/decrease-font-size ()
    "Decrease current font size by a factor of `gugl/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq gugl/current-font-size
          (max 1
               (floor (/ gugl/current-font-size gugl/font-change-increment))))
    (gugl/set-font-size))
  
  (define-key global-map (kbd "C-)") 'gugl/reset-font-size)
  (define-key global-map (kbd "C-+") 'gugl/increase-font-size)
  (define-key global-map (kbd "C-=") 'gugl/increase-font-size)
  (define-key global-map (kbd "C-_") 'gugl/decrease-font-size)
  (define-key global-map (kbd "C--") 'gugl/decrease-font-size)
#+END_SRC

** Hide certain modes from the modeline
I’d rather have only a few necessary mode identifiers on my modeline.
This either hides or “renames” a variety of major or minor modes using the =diminish= package.

#+BEGIN_SRC emacs-lisp
  (defmacro diminish-minor-mode (filename mode &optional abbrev)
    `(eval-after-load (symbol-name ,filename)
       '(diminish ,mode ,abbrev)))
  
  (defmacro diminish-major-mode (mode-hook abbrev)
    `(add-hook ,mode-hook
               (lambda () (setq mode-name ,abbrev))))
  
  (diminish-minor-mode 'abbrev 'abbrev-mode)
  (diminish-minor-mode 'company 'company-mode)
  (diminish-minor-mode 'eldoc 'eldoc-mode)
  (diminish-minor-mode 'flycheck 'flycheck-mode)
  (diminish-minor-mode 'flyspell 'flyspell-mode)
  (diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
  (diminish-minor-mode 'projectile 'projectile-mode)
  (diminish-minor-mode 'ruby-end 'ruby-end-mode)
  (diminish-minor-mode 'subword 'subword-mode)
  (diminish-minor-mode 'undo-tree 'undo-tree-mode)
  (diminish-minor-mode 'yard-mode 'yard-mode)
  (diminish-minor-mode 'yasnippet 'yas-minor-mode)
  (diminish-minor-mode 'wrap-region 'wrap-region-mode)
  
  (diminish-minor-mode 'paredit 'paredit-mode " π")
  
  (diminish-major-mode 'emacs-lisp-mode-hook "el")
  (diminish-major-mode 'haskell-mode-hook "λ=")
  (diminish-major-mode 'lisp-interaction-mode-hook "λ")
  (diminish-major-mode 'python-mode-hook "Py")
#+END_SRC

** Disable Scrollbar and toolbar

#+BEGIN_SRC emacs-lisp
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
#+END_SRC
  
** Highlight uncommitted changes
Use the =diff-hl= package to highlight changed-and-uncommitted lines when programming.

#+BEGIN_SRC emacs-lisp
  (require 'diff-hl)

  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
#+END_SRC

** Window navigation
  
Navigate between windows using Alt-1, Alt-2, Shift-left, shift-up, shift-right

Also use M-o to switch to the next window

#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC

** Switching between window configurations

You can use C-c left or C-c right to switch to the prev or next window configuration.
This is very useful when you want to focus on one single buffer but want to go back
to your old more complex window configuration.

#+BEGIN_SRC emacs-lisp
  (winner-mode t)
#+END_SRC

** Powerline

Use Powerline with it's default theme

#+BEGIN_SRC emacs-lisp
  (require 'powerline)
  (powerline-default-theme)
#+END_SRC
